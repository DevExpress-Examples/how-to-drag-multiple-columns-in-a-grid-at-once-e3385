'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

#Disable Warning BC1591

Namespace DXSample


	''' <summary>
	'''Represents a strongly typed in-memory cache of data.
	'''</summary>
	<System.Serializable()>
	<System.ComponentModel.DesignerCategoryAttribute("code")>
	<System.ComponentModel.ToolboxItem(True)>
	<System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")>
	<System.Xml.Serialization.XmlRootAttribute("DataSet1")>
	<System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>
	Partial Public Class DataSet1
		Inherits System.Data.DataSet

		Private tableCustomerInfo As CustomerInfoDataTable

		Private tableDetail As DetailDataTable

		Private relationCustomerInfo_CustomerInfo1 As System.Data.DataRelation

		Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
		Public Sub New()
			Me.BeginInit()
			Me.InitClass()
			Dim schemaChangedHandler As New System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
			AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
			AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
			Me.EndInit()
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
		Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
			MyBase.New(info, context, False)
			If (Me.IsBinarySerialized(info, context) = True) Then
				Me.InitVars(False)
				Dim schemaChangedHandler1 As New System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
				AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
				AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
				Return
			End If
			Dim strSchema As String = (CStr(info.GetValue("XmlSchema", GetType(String))))
			If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
				Dim ds As New System.Data.DataSet()
				ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
				If (ds.Tables("CustomerInfo") IsNot Nothing) Then
					MyBase.Tables.Add(New CustomerInfoDataTable(ds.Tables("CustomerInfo")))
				End If
				If (ds.Tables("Detail") IsNot Nothing) Then
					MyBase.Tables.Add(New DetailDataTable(ds.Tables("Detail")))
				End If
				Me.DataSetName = ds.DataSetName
				Me.Prefix = ds.Prefix
				Me.Namespace = ds.Namespace
				Me.Locale = ds.Locale
				Me.CaseSensitive = ds.CaseSensitive
				Me.EnforceConstraints = ds.EnforceConstraints
				Me.Merge(ds, False, System.Data.MissingSchemaAction.Add)
				Me.InitVars()
			Else
				Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
			End If
			Me.GetSerializationData(info, context)
			Dim schemaChangedHandler As New System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
			AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
			AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
		<System.ComponentModel.Browsable(False)>
		<System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>
		Public ReadOnly Property CustomerInfo() As CustomerInfoDataTable
			Get
				Return Me.tableCustomerInfo
			End Get
		End Property

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
		<System.ComponentModel.Browsable(False)>
		<System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>
		Public ReadOnly Property Detail() As DetailDataTable
			Get
				Return Me.tableDetail
			End Get
		End Property

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
		<System.ComponentModel.BrowsableAttribute(True)>
		<System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>
		Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
			Get
				Return Me._schemaSerializationMode
			End Get
			Set(ByVal value As System.Data.SchemaSerializationMode)
				Me._schemaSerializationMode = value
			End Set
		End Property

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
		<System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>
		Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
			Get
				Return MyBase.Tables
			End Get
		End Property

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
		<System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>
		Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
			Get
				Return MyBase.Relations
			End Get
		End Property

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
		Protected Overrides Sub InitializeDerivedDataSet()
			Me.BeginInit()
			Me.InitClass()
			Me.EndInit()
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
		Public Overrides Function Clone() As System.Data.DataSet
			Dim cln As DataSet1 = (CType(MyBase.Clone(), DataSet1))
			cln.InitVars()
			cln.SchemaSerializationMode = Me.SchemaSerializationMode
			Return cln
		End Function

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
		Protected Overrides Function ShouldSerializeTables() As Boolean
			Return False
		End Function

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
		Protected Overrides Function ShouldSerializeRelations() As Boolean
			Return False
		End Function

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
		Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
			If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
				Me.Reset()
				Dim ds As New System.Data.DataSet()
				ds.ReadXml(reader)
				If (ds.Tables("CustomerInfo") IsNot Nothing) Then
					MyBase.Tables.Add(New CustomerInfoDataTable(ds.Tables("CustomerInfo")))
				End If
				If (ds.Tables("Detail") IsNot Nothing) Then
					MyBase.Tables.Add(New DetailDataTable(ds.Tables("Detail")))
				End If
				Me.DataSetName = ds.DataSetName
				Me.Prefix = ds.Prefix
				Me.Namespace = ds.Namespace
				Me.Locale = ds.Locale
				Me.CaseSensitive = ds.CaseSensitive
				Me.EnforceConstraints = ds.EnforceConstraints
				Me.Merge(ds, False, System.Data.MissingSchemaAction.Add)
				Me.InitVars()
			Else
				Me.ReadXml(reader)
				Me.InitVars()
			End If
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
		Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
			Dim stream As New System.IO.MemoryStream()
			Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
			stream.Position = 0
			Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
		End Function

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
		Friend Sub InitVars()
			Me.InitVars(True)
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
		Friend Sub InitVars(ByVal initTable As Boolean)
			Me.tableCustomerInfo = (CType(MyBase.Tables("CustomerInfo"), CustomerInfoDataTable))
			If (initTable = True) Then
				If (Me.tableCustomerInfo IsNot Nothing) Then
					Me.tableCustomerInfo.InitVars()
				End If
			End If
			Me.tableDetail = (CType(MyBase.Tables("Detail"), DetailDataTable))
			If (initTable = True) Then
				If (Me.tableDetail IsNot Nothing) Then
					Me.tableDetail.InitVars()
				End If
			End If
			Me.relationCustomerInfo_CustomerInfo1 = Me.Relations("CustomerInfo_CustomerInfo1")
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
		Private Sub InitClass()
			Me.DataSetName = "DataSet1"
			Me.Prefix = ""
			Me.Namespace = "http://tempuri.org/DataSet1.xsd"
			Me.EnforceConstraints = True
			Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
			Me.tableCustomerInfo = New CustomerInfoDataTable()
			MyBase.Tables.Add(Me.tableCustomerInfo)
			Me.tableDetail = New DetailDataTable()
			MyBase.Tables.Add(Me.tableDetail)
			Me.relationCustomerInfo_CustomerInfo1 = New System.Data.DataRelation("CustomerInfo_CustomerInfo1", New System.Data.DataColumn() { Me.tableCustomerInfo.CustomerIDColumn}, New System.Data.DataColumn() { Me.tableDetail.CustomerIDColumn}, False)
			Me.Relations.Add(Me.relationCustomerInfo_CustomerInfo1)
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
		Private Function ShouldSerializeCustomerInfo() As Boolean
			Return False
		End Function

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
		Private Function ShouldSerializeDetail() As Boolean
			Return False
		End Function

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
		Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
			If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
				Me.InitVars()
			End If
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
		Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
			Dim ds As New DataSet1()
			Dim type As New System.Xml.Schema.XmlSchemaComplexType()
			Dim sequence As New System.Xml.Schema.XmlSchemaSequence()
			Dim any As New System.Xml.Schema.XmlSchemaAny()
			any.Namespace = ds.Namespace
			sequence.Items.Add(any)
			type.Particle = sequence
			Dim dsSchema As System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable()
			If xs.Contains(dsSchema.TargetNamespace) Then
				Dim s1 As New System.IO.MemoryStream()
				Dim s2 As New System.IO.MemoryStream()
				Try
					Dim schema As System.Xml.Schema.XmlSchema = Nothing
					dsSchema.Write(s1)
					Dim schemas As System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator()
					Do While schemas.MoveNext()
						schema = (CType(schemas.Current, System.Xml.Schema.XmlSchema))
						s2.SetLength(0)
						schema.Write(s2)
						If (s1.Length = s2.Length) Then
							s1.Position = 0
							s2.Position = 0
							Do While ((s1.Position <> s1.Length) AndAlso (s1.ReadByte() = s2.ReadByte()))

							Loop
							If (s1.Position = s1.Length) Then
								Return type
							End If
						End If
					Loop
				Finally
					If (s1 IsNot Nothing) Then
						s1.Close()
					End If
					If (s2 IsNot Nothing) Then
						s2.Close()
					End If
				End Try
			End If
			xs.Add(dsSchema)
			Return type
		End Function

		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
		Public Delegate Sub CustomerInfoRowChangeEventHandler(ByVal sender As Object, ByVal e As CustomerInfoRowChangeEvent)

		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
		Public Delegate Sub DetailRowChangeEventHandler(ByVal sender As Object, ByVal e As DetailRowChangeEvent)

		''' <summary>
		'''Represents the strongly named DataTable class.
		'''</summary>
		<System.Serializable()>
		<System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>
		Partial Public Class CustomerInfoDataTable
			Inherits System.Data.TypedTableBase(Of CustomerInfoRow)

			Private columnCustomerID As System.Data.DataColumn

			Private columnFirstName As System.Data.DataColumn

			Private columnLastName As System.Data.DataColumn

			Private columnImage As System.Data.DataColumn

			Private columnDate As System.Data.DataColumn

			Private columnCheck As System.Data.DataColumn

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Public Sub New()
				Me.TableName = "CustomerInfo"
				Me.BeginInit()
				Me.InitClass()
				Me.EndInit()
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Friend Sub New(ByVal table As System.Data.DataTable)
				Me.TableName = table.TableName
				If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
					Me.CaseSensitive = table.CaseSensitive
				End If
				If (table.Locale.ToString() <> table.DataSet.Locale.ToString()) Then
					Me.Locale = table.Locale
				End If
				If (table.Namespace <> table.DataSet.Namespace) Then
					Me.Namespace = table.Namespace
				End If
				Me.Prefix = table.Prefix
				Me.MinimumCapacity = table.MinimumCapacity
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
				MyBase.New(info, context)
				Me.InitVars()
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Public ReadOnly Property CustomerIDColumn() As System.Data.DataColumn
				Get
					Return Me.columnCustomerID
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Public ReadOnly Property FirstNameColumn() As System.Data.DataColumn
				Get
					Return Me.columnFirstName
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Public ReadOnly Property LastNameColumn() As System.Data.DataColumn
				Get
					Return Me.columnLastName
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Public ReadOnly Property ImageColumn() As System.Data.DataColumn
				Get
					Return Me.columnImage
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Public ReadOnly Property DateColumn() As System.Data.DataColumn
				Get
					Return Me.columnDate
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Public ReadOnly Property CheckColumn() As System.Data.DataColumn
				Get
					Return Me.columnCheck
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			<System.ComponentModel.Browsable(False)>
			Public ReadOnly Overloads Property Count() As Integer
				Get
					Return Me.Rows.Count
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Default Public ReadOnly Property Item(ByVal index As Integer) As CustomerInfoRow
				Get
					Return (CType(Me.Rows(index), CustomerInfoRow))
				End Get
			End Property

			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Public Event CustomerInfoRowChanging As CustomerInfoRowChangeEventHandler

			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Public Event CustomerInfoRowChanged As CustomerInfoRowChangeEventHandler

			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Public Event CustomerInfoRowDeleting As CustomerInfoRowChangeEventHandler

			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Public Event CustomerInfoRowDeleted As CustomerInfoRowChangeEventHandler

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Public Sub AddCustomerInfoRow(ByVal row As CustomerInfoRow)
				Me.Rows.Add(row)
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Public Function AddCustomerInfoRow(ByVal CustomerID As Integer, ByVal FirstName As String, ByVal LastName As String, ByVal Image As System.Drawing.Image, ByVal [Date] As DateTime, ByVal Check As Boolean) As CustomerInfoRow
				Dim rowCustomerInfoRow As CustomerInfoRow = (CType(Me.NewRow(), CustomerInfoRow))
				Dim columnValuesArray() As Object = { CustomerID, FirstName, LastName, Image, [Date], Check}
				rowCustomerInfoRow.ItemArray = columnValuesArray
				Me.Rows.Add(rowCustomerInfoRow)
				Return rowCustomerInfoRow
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Public Overrides Function Clone() As System.Data.DataTable
				Dim cln As CustomerInfoDataTable = (CType(MyBase.Clone(), CustomerInfoDataTable))
				cln.InitVars()
				Return cln
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Protected Overrides Function CreateInstance() As System.Data.DataTable
				Return New CustomerInfoDataTable()
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Friend Sub InitVars()
				Me.columnCustomerID = MyBase.Columns("CustomerID")
				Me.columnFirstName = MyBase.Columns("FirstName")
				Me.columnLastName = MyBase.Columns("LastName")
				Me.columnImage = MyBase.Columns("Image")
				Me.columnDate = MyBase.Columns("Date")
				Me.columnCheck = MyBase.Columns("Check")
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Private Sub InitClass()
				Me.columnCustomerID = New System.Data.DataColumn("CustomerID", GetType(Integer), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnCustomerID)
				Me.columnFirstName = New System.Data.DataColumn("FirstName", GetType(String), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnFirstName)
				Me.columnLastName = New System.Data.DataColumn("LastName", GetType(String), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnLastName)
				Me.columnImage = New System.Data.DataColumn("Image", GetType(System.Drawing.Image), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnImage)
				Me.columnDate = New System.Data.DataColumn("Date", GetType(DateTime), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnDate)
				Me.columnCheck = New System.Data.DataColumn("Check", GetType(Boolean), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnCheck)
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Public Function NewCustomerInfoRow() As CustomerInfoRow
				Return (CType(Me.NewRow(), CustomerInfoRow))
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
				Return New CustomerInfoRow(builder)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Protected Overrides Function GetRowType() As System.Type
				Return GetType(CustomerInfoRow)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
				MyBase.OnRowChanged(e)
				RaiseEvent CustomerInfoRowChanged(Me, New CustomerInfoRowChangeEvent((CType(e.Row, CustomerInfoRow)), e.Action))
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
				MyBase.OnRowChanging(e)
				RaiseEvent CustomerInfoRowChanging(Me, New CustomerInfoRowChangeEvent((CType(e.Row, CustomerInfoRow)), e.Action))
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
				MyBase.OnRowDeleted(e)
				RaiseEvent CustomerInfoRowDeleted(Me, New CustomerInfoRowChangeEvent((CType(e.Row, CustomerInfoRow)), e.Action))
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
				MyBase.OnRowDeleting(e)
				RaiseEvent CustomerInfoRowDeleting(Me, New CustomerInfoRowChangeEvent((CType(e.Row, CustomerInfoRow)), e.Action))
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Public Sub RemoveCustomerInfoRow(ByVal row As CustomerInfoRow)
				Me.Rows.Remove(row)
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
				Dim type As New System.Xml.Schema.XmlSchemaComplexType()
				Dim sequence As New System.Xml.Schema.XmlSchemaSequence()
				Dim ds As New DataSet1()
				Dim any1 As New System.Xml.Schema.XmlSchemaAny()
				any1.Namespace = "http://www.w3.org/2001/XMLSchema"
				any1.MinOccurs = New Decimal(0)
				any1.MaxOccurs = Decimal.MaxValue
				any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
				sequence.Items.Add(any1)
				Dim any2 As New System.Xml.Schema.XmlSchemaAny()
				any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
				any2.MinOccurs = New Decimal(1)
				any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
				sequence.Items.Add(any2)
				Dim attribute1 As New System.Xml.Schema.XmlSchemaAttribute()
				attribute1.Name = "namespace"
				attribute1.FixedValue = ds.Namespace
				type.Attributes.Add(attribute1)
				Dim attribute2 As New System.Xml.Schema.XmlSchemaAttribute()
				attribute2.Name = "tableTypeName"
				attribute2.FixedValue = "CustomerInfoDataTable"
				type.Attributes.Add(attribute2)
				type.Particle = sequence
				Dim dsSchema As System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable()
				If xs.Contains(dsSchema.TargetNamespace) Then
					Dim s1 As New System.IO.MemoryStream()
					Dim s2 As New System.IO.MemoryStream()
					Try
						Dim schema As System.Xml.Schema.XmlSchema = Nothing
						dsSchema.Write(s1)
						Dim schemas As System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator()
						Do While schemas.MoveNext()
							schema = (CType(schemas.Current, System.Xml.Schema.XmlSchema))
							s2.SetLength(0)
							schema.Write(s2)
							If (s1.Length = s2.Length) Then
								s1.Position = 0
								s2.Position = 0
								Do While ((s1.Position <> s1.Length) AndAlso (s1.ReadByte() = s2.ReadByte()))

								Loop
								If (s1.Position = s1.Length) Then
									Return type
								End If
							End If
						Loop
					Finally
						If (s1 IsNot Nothing) Then
							s1.Close()
						End If
						If (s2 IsNot Nothing) Then
							s2.Close()
						End If
					End Try
				End If
				xs.Add(dsSchema)
				Return type
			End Function
		End Class

		''' <summary>
		'''Represents the strongly named DataTable class.
		'''</summary>
		<System.Serializable()>
		<System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>
		Partial Public Class DetailDataTable
			Inherits System.Data.TypedTableBase(Of DetailRow)

			Private columnCustomerID As System.Data.DataColumn

			Private columnFirstName As System.Data.DataColumn

			Private columnMasterID As System.Data.DataColumn

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Public Sub New()
				Me.TableName = "Detail"
				Me.BeginInit()
				Me.InitClass()
				Me.EndInit()
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Friend Sub New(ByVal table As System.Data.DataTable)
				Me.TableName = table.TableName
				If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
					Me.CaseSensitive = table.CaseSensitive
				End If
				If (table.Locale.ToString() <> table.DataSet.Locale.ToString()) Then
					Me.Locale = table.Locale
				End If
				If (table.Namespace <> table.DataSet.Namespace) Then
					Me.Namespace = table.Namespace
				End If
				Me.Prefix = table.Prefix
				Me.MinimumCapacity = table.MinimumCapacity
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
				MyBase.New(info, context)
				Me.InitVars()
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Public ReadOnly Property CustomerIDColumn() As System.Data.DataColumn
				Get
					Return Me.columnCustomerID
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Public ReadOnly Property FirstNameColumn() As System.Data.DataColumn
				Get
					Return Me.columnFirstName
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Public ReadOnly Property MasterIDColumn() As System.Data.DataColumn
				Get
					Return Me.columnMasterID
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			<System.ComponentModel.Browsable(False)>
			Public ReadOnly Overloads Property Count() As Integer
				Get
					Return Me.Rows.Count
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Default Public ReadOnly Property Item(ByVal index As Integer) As DetailRow
				Get
					Return (CType(Me.Rows(index), DetailRow))
				End Get
			End Property

			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Public Event DetailRowChanging As DetailRowChangeEventHandler

			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Public Event DetailRowChanged As DetailRowChangeEventHandler

			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Public Event DetailRowDeleting As DetailRowChangeEventHandler

			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Public Event DetailRowDeleted As DetailRowChangeEventHandler

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Public Sub AddDetailRow(ByVal row As DetailRow)
				Me.Rows.Add(row)
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Public Function AddDetailRow(ByVal parentCustomerInfoRowByCustomerInfo_CustomerInfo1 As CustomerInfoRow, ByVal FirstName As String, ByVal MasterID As Integer) As DetailRow
				Dim rowDetailRow As DetailRow = (CType(Me.NewRow(), DetailRow))
				Dim columnValuesArray() As Object = { Nothing, FirstName, MasterID}
				If (parentCustomerInfoRowByCustomerInfo_CustomerInfo1 IsNot Nothing) Then
					columnValuesArray(0) = parentCustomerInfoRowByCustomerInfo_CustomerInfo1(0)
				End If
				rowDetailRow.ItemArray = columnValuesArray
				Me.Rows.Add(rowDetailRow)
				Return rowDetailRow
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Public Overrides Function Clone() As System.Data.DataTable
				Dim cln As DetailDataTable = (CType(MyBase.Clone(), DetailDataTable))
				cln.InitVars()
				Return cln
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Protected Overrides Function CreateInstance() As System.Data.DataTable
				Return New DetailDataTable()
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Friend Sub InitVars()
				Me.columnCustomerID = MyBase.Columns("CustomerID")
				Me.columnFirstName = MyBase.Columns("FirstName")
				Me.columnMasterID = MyBase.Columns("MasterID")
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Private Sub InitClass()
				Me.columnCustomerID = New System.Data.DataColumn("CustomerID", GetType(Integer), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnCustomerID)
				Me.columnFirstName = New System.Data.DataColumn("FirstName", GetType(String), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnFirstName)
				Me.columnMasterID = New System.Data.DataColumn("MasterID", GetType(Integer), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnMasterID)
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Public Function NewDetailRow() As DetailRow
				Return (CType(Me.NewRow(), DetailRow))
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
				Return New DetailRow(builder)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Protected Overrides Function GetRowType() As System.Type
				Return GetType(DetailRow)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
				MyBase.OnRowChanged(e)
				RaiseEvent DetailRowChanged(Me, New DetailRowChangeEvent((CType(e.Row, DetailRow)), e.Action))
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
				MyBase.OnRowChanging(e)
				RaiseEvent DetailRowChanging(Me, New DetailRowChangeEvent((CType(e.Row, DetailRow)), e.Action))
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
				MyBase.OnRowDeleted(e)
				RaiseEvent DetailRowDeleted(Me, New DetailRowChangeEvent((CType(e.Row, DetailRow)), e.Action))
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
				MyBase.OnRowDeleting(e)
				RaiseEvent DetailRowDeleting(Me, New DetailRowChangeEvent((CType(e.Row, DetailRow)), e.Action))
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Public Sub RemoveDetailRow(ByVal row As DetailRow)
				Me.Rows.Remove(row)
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
				Dim type As New System.Xml.Schema.XmlSchemaComplexType()
				Dim sequence As New System.Xml.Schema.XmlSchemaSequence()
				Dim ds As New DataSet1()
				Dim any1 As New System.Xml.Schema.XmlSchemaAny()
				any1.Namespace = "http://www.w3.org/2001/XMLSchema"
				any1.MinOccurs = New Decimal(0)
				any1.MaxOccurs = Decimal.MaxValue
				any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
				sequence.Items.Add(any1)
				Dim any2 As New System.Xml.Schema.XmlSchemaAny()
				any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
				any2.MinOccurs = New Decimal(1)
				any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
				sequence.Items.Add(any2)
				Dim attribute1 As New System.Xml.Schema.XmlSchemaAttribute()
				attribute1.Name = "namespace"
				attribute1.FixedValue = ds.Namespace
				type.Attributes.Add(attribute1)
				Dim attribute2 As New System.Xml.Schema.XmlSchemaAttribute()
				attribute2.Name = "tableTypeName"
				attribute2.FixedValue = "DetailDataTable"
				type.Attributes.Add(attribute2)
				type.Particle = sequence
				Dim dsSchema As System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable()
				If xs.Contains(dsSchema.TargetNamespace) Then
					Dim s1 As New System.IO.MemoryStream()
					Dim s2 As New System.IO.MemoryStream()
					Try
						Dim schema As System.Xml.Schema.XmlSchema = Nothing
						dsSchema.Write(s1)
						Dim schemas As System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator()
						Do While schemas.MoveNext()
							schema = (CType(schemas.Current, System.Xml.Schema.XmlSchema))
							s2.SetLength(0)
							schema.Write(s2)
							If (s1.Length = s2.Length) Then
								s1.Position = 0
								s2.Position = 0
								Do While ((s1.Position <> s1.Length) AndAlso (s1.ReadByte() = s2.ReadByte()))

								Loop
								If (s1.Position = s1.Length) Then
									Return type
								End If
							End If
						Loop
					Finally
						If (s1 IsNot Nothing) Then
							s1.Close()
						End If
						If (s2 IsNot Nothing) Then
							s2.Close()
						End If
					End Try
				End If
				xs.Add(dsSchema)
				Return type
			End Function
		End Class

		''' <summary>
		'''Represents strongly named DataRow class.
		'''</summary>
		Partial Public Class CustomerInfoRow
			Inherits System.Data.DataRow

			Private tableCustomerInfo As CustomerInfoDataTable

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
				MyBase.New(rb)
				Me.tableCustomerInfo = (CType(Me.Table, CustomerInfoDataTable))
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Public Property CustomerID() As Integer
				Get
					Try
						Return (CInt(Me(Me.tableCustomerInfo.CustomerIDColumn)))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'CustomerID' in table 'CustomerInfo' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Integer)
					Me(Me.tableCustomerInfo.CustomerIDColumn) = value
				End Set
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Public Property FirstName() As String
				Get
					Try
						Return (CStr(Me(Me.tableCustomerInfo.FirstNameColumn)))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'FirstName' in table 'CustomerInfo' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableCustomerInfo.FirstNameColumn) = value
				End Set
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Public Property LastName() As String
				Get
					Try
						Return (CStr(Me(Me.tableCustomerInfo.LastNameColumn)))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'LastName' in table 'CustomerInfo' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableCustomerInfo.LastNameColumn) = value
				End Set
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Public Property Image() As System.Drawing.Image
				Get
					Try
						Return (CType(Me(Me.tableCustomerInfo.ImageColumn), System.Drawing.Image))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'Image' in table 'CustomerInfo' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As System.Drawing.Image)
					Me(Me.tableCustomerInfo.ImageColumn) = value
				End Set
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Public Property [Date]() As DateTime
				Get
					Try
						Return (CDate(Me(Me.tableCustomerInfo.DateColumn)))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'Date' in table 'CustomerInfo' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As DateTime)
					Me(Me.tableCustomerInfo.DateColumn) = value
				End Set
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Public Property Check() As Boolean
				Get
					Try
						Return (CBool(Me(Me.tableCustomerInfo.CheckColumn)))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'Check' in table 'CustomerInfo' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Boolean)
					Me(Me.tableCustomerInfo.CheckColumn) = value
				End Set
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Public Function IsCustomerIDNull() As Boolean
				Return Me.IsNull(Me.tableCustomerInfo.CustomerIDColumn)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Public Sub SetCustomerIDNull()
				Me(Me.tableCustomerInfo.CustomerIDColumn) = System.Convert.DBNull
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Public Function IsFirstNameNull() As Boolean
				Return Me.IsNull(Me.tableCustomerInfo.FirstNameColumn)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Public Sub SetFirstNameNull()
				Me(Me.tableCustomerInfo.FirstNameColumn) = System.Convert.DBNull
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Public Function IsLastNameNull() As Boolean
				Return Me.IsNull(Me.tableCustomerInfo.LastNameColumn)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Public Sub SetLastNameNull()
				Me(Me.tableCustomerInfo.LastNameColumn) = System.Convert.DBNull
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Public Function IsImageNull() As Boolean
				Return Me.IsNull(Me.tableCustomerInfo.ImageColumn)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Public Sub SetImageNull()
				Me(Me.tableCustomerInfo.ImageColumn) = System.Convert.DBNull
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Public Function IsDateNull() As Boolean
				Return Me.IsNull(Me.tableCustomerInfo.DateColumn)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Public Sub SetDateNull()
				Me(Me.tableCustomerInfo.DateColumn) = System.Convert.DBNull
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Public Function IsCheckNull() As Boolean
				Return Me.IsNull(Me.tableCustomerInfo.CheckColumn)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Public Sub SetCheckNull()
				Me(Me.tableCustomerInfo.CheckColumn) = System.Convert.DBNull
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Public Function GetDetailRows() As DetailRow()
				If (Me.Table.ChildRelations("CustomerInfo_CustomerInfo1") Is Nothing) Then
					Return New DetailRow(){}
				Else
					Return (CType(MyBase.GetChildRows(Me.Table.ChildRelations("CustomerInfo_CustomerInfo1")), DetailRow()))
				End If
			End Function
		End Class

		''' <summary>
		'''Represents strongly named DataRow class.
		'''</summary>
		Partial Public Class DetailRow
			Inherits System.Data.DataRow

			Private tableDetail As DetailDataTable

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
				MyBase.New(rb)
				Me.tableDetail = (CType(Me.Table, DetailDataTable))
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Public Property CustomerID() As Integer
				Get
					Try
						Return (CInt(Me(Me.tableDetail.CustomerIDColumn)))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'CustomerID' in table 'Detail' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Integer)
					Me(Me.tableDetail.CustomerIDColumn) = value
				End Set
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Public Property FirstName() As String
				Get
					Try
						Return (CStr(Me(Me.tableDetail.FirstNameColumn)))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'FirstName' in table 'Detail' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableDetail.FirstNameColumn) = value
				End Set
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Public Property MasterID() As Integer
				Get
					Try
						Return (CInt(Me(Me.tableDetail.MasterIDColumn)))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'MasterID' in table 'Detail' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Integer)
					Me(Me.tableDetail.MasterIDColumn) = value
				End Set
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Public Property CustomerInfoRow() As CustomerInfoRow
				Get
					Return (CType(Me.GetParentRow(Me.Table.ParentRelations("CustomerInfo_CustomerInfo1")), CustomerInfoRow))
				End Get
				Set(ByVal value As CustomerInfoRow)
					Me.SetParentRow(value, Me.Table.ParentRelations("CustomerInfo_CustomerInfo1"))
				End Set
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Public Function IsCustomerIDNull() As Boolean
				Return Me.IsNull(Me.tableDetail.CustomerIDColumn)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Public Sub SetCustomerIDNull()
				Me(Me.tableDetail.CustomerIDColumn) = System.Convert.DBNull
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Public Function IsFirstNameNull() As Boolean
				Return Me.IsNull(Me.tableDetail.FirstNameColumn)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Public Sub SetFirstNameNull()
				Me(Me.tableDetail.FirstNameColumn) = System.Convert.DBNull
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Public Function IsMasterIDNull() As Boolean
				Return Me.IsNull(Me.tableDetail.MasterIDColumn)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Public Sub SetMasterIDNull()
				Me(Me.tableDetail.MasterIDColumn) = System.Convert.DBNull
			End Sub
		End Class

		''' <summary>
		'''Row event argument class
		'''</summary>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
		Public Class CustomerInfoRowChangeEvent
			Inherits System.EventArgs

			Private eventRow As CustomerInfoRow

			Private eventAction As System.Data.DataRowAction

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Public Sub New(ByVal row As CustomerInfoRow, ByVal action As System.Data.DataRowAction)
				Me.eventRow = row
				Me.eventAction = action
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Public ReadOnly Property Row() As CustomerInfoRow
				Get
					Return Me.eventRow
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Public ReadOnly Property Action() As System.Data.DataRowAction
				Get
					Return Me.eventAction
				End Get
			End Property
		End Class

		''' <summary>
		'''Row event argument class
		'''</summary>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
		Public Class DetailRowChangeEvent
			Inherits System.EventArgs

			Private eventRow As DetailRow

			Private eventAction As System.Data.DataRowAction

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Public Sub New(ByVal row As DetailRow, ByVal action As System.Data.DataRowAction)
				Me.eventRow = row
				Me.eventAction = action
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Public ReadOnly Property Row() As DetailRow
				Get
					Return Me.eventRow
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>
			Public ReadOnly Property Action() As System.Data.DataRowAction
				Get
					Return Me.eventAction
				End Get
			End Property
		End Class
	End Class
End Namespace

#Enable Warning BC1591